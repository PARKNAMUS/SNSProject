<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="indexDAO">

	<select id="getSearchUser" parameterType="String" resultType="park.spring.web.vo.CustomerVO">
		SELECT email,name,nick_name,profile_img FROM customer WHERE name like '%' || #{value} || '%' or nick_name like '%' || #{value} || '%'
	</select>
	<select id="getPost" parameterType="String" resultType="park.spring.web.vo.PostVO">
		<![CDATA[select p.post_seq,p.post_content,p.post_image,p.post_uploader,to_char(p.post_regdate,'yyyy/MM/dd') as post_regdate,c.profile_img,c.nick_name,
		(SELECT COUNT(*) FROM comments WHERE comments_post_seq = p.post_seq) as comments_num, 
		(SELECT COUNT(*) FROM postlike WHERE postlike_post_seq = p.post_seq and postlike_email = #{value}) as is_like,
		(SELECT COUNT(*) FROM postsave WHERE postsave_post_seq = p.post_seq and postsave_email = #{value}) as is_save,
		(SELECT COUNT(*) FROM postlike WHERE postlike_post_seq = p.post_seq) as like_num
		from post p join customer c on p.post_uploader = c.email
		where p.post_uploader = #{value} or p.post_uploader in (select following from follow where follower = #{value}) order by post_regdate desc]]>
	</select>
	<select id="getSpecPost" parameterType="int" resultType="park.spring.web.vo.PostVO">
		<![CDATA[select p.post_seq,p.post_content,p.post_image,p.post_uploader,to_char(p.post_regdate,'yyyy/MM/dd') as post_regdate,c.profile_img,c.nick_name,
		(SELECT COUNT(*) FROM comments WHERE comments_post_seq = #{post_seq}) as comments_num, 
		(SELECT COUNT(*) FROM postlike WHERE postlike_post_seq = #{post_seq}) as like_num
		from post p join customer c on p.post_uploader = c.email
		where p.post_seq = #{post_seq} order by post_regdate desc]]>
	</select>
	<select id="getImage" parameterType="int" resultType="String">
		SELECT post_image FROM post WHERE post_seq = #{post_seq}
	</select>
	<insert id="insertComment" parameterType="park.spring.web.vo.CommentsVO">
		<selectKey keyProperty="comments_seq" resultType="int" order="BEFORE">
		SELECT comments_seq.nextval From DUAL
		</selectKey>
		INSERT INTO comments(comments_seq, comments_email, comments_nick_name, comments_post_seq,comment_content, comments_profile )
		VALUES(#{comments_seq},#{comments_email},(SELECT nick_name FROM customer WHERE email = #{comments_email}),#{commnets_post_seq}, #{comment_content},(SELECT profile_img FROM customer WHERE email = #{comments_email}))
	</insert>
	<delete id="deletePost" parameterType="int">
		DELETE post WHERE post_seq = #{post_seq}
	</delete>
	<select id="getComments" parameterType="int" resultType="park.spring.web.vo.CommentsVO">
		SELECT * FROM comments WHERE comments_post_seq = #{post_seq} ORDER BY comments_regdate DESC
	</select>
	<insert id="belike" parameterType="park.spring.web.vo.PostLikeVO">
		<selectKey keyProperty="postlike_seq" resultType="int" order="BEFORE">
		SELECT postlike_seq.nextval From DUAL
		</selectKey>
		INSERT INTO postlike(postlike_seq, postlike_post_seq, postlike_email) VALUES(#{postlike_seq},#{postlike_post_seq},#{postlike_email}) 
	</insert>
	<delete id="unlike" parameterType="park.spring.web.vo.PostLikeVO">
		DELETE postlike WHERE postlike_post_seq =#{postlike_post_seq} AND postlike_email = #{postlike_email}
	</delete>
	<insert id="save" parameterType="park.spring.web.vo.PostLikeVO">
		<selectKey keyProperty="postsave_seq" resultType="int" order="BEFORE">
		SELECT postsave_seq.nextval From DUAL
		</selectKey>
		INSERT INTO postsave(postsave_seq, postsave_post_seq, postsave_email) VALUES(#{postsave_seq},#{postsave_post_seq},#{postsave_email}) 
	</insert>
	<delete id="unsave" parameterType="park.spring.web.vo.PostLikeVO">
		DELETE postsave WHERE postsave_post_seq =#{postsave_post_seq} AND postsave_email = #{postsave_email}
	</delete>
	<select id="recommend" parameterType="String" resultType="park.spring.web.vo.CustomerVO">
		select following as email,nick_name,name, profile_img  from follow join customer on following = email where follower in(select following from follow where follower = #{value})
		and following != #{value} and following not in(select following from follow where follower =#{value})
		group by following,nick_name,name, profile_img order by count(following) desc
	</select>
</mapper>
